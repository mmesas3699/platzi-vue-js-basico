INTRODUCCION AL CURSO
	
	# Características:
		
		* Framework progresivo: Se puede ir incrementando la complejidad de la aplicación a medida que se 
			requiera.

		* MV*: Es una tecnologia de modelos y vistas sin importar el controlador que se use. Funciona 
			con vistas que estan atadas a los modelos.

		* Reactivo: Al cambiar el estado de los modelos las vistas se van a actualizar automaticamente

		* Vue.js core: El core de vue.js es para las interfaces de usuario (UI). Para el manejo de rutas el
			server side render existen otras librerias que se pueden usar junta a esta.

		* Componentes: Esta orientada a componenetes reutilizables.

		* Fácil de aprender: En especial para diseñadores. En vue se especifica que se quiere que suceda 
			y por ejemplo en contra partida en react se especifica como se quiere que suceda.

		* Vue.js + herramientas + librerías = SPA (single page aplication): 


	# Cambio de estado: Cada vez que cambia el estado vue.js hace los bindings* y se actualiza las vistas. Esto
		con los inputs de los usuarios. Por ejemplo un clic o enviar un formulario, esto cambia los estados y 
		por ende se va a cambiar el render de la vista.

				User Input
		   ______________________
		  |	                     |	
		  |	                     v	
		View  <--------------   State
				   render

	** binding ('atar' un componente o algun elemente por ejemplo un modelo a una vista)

	
	# Vue.js es mas optimo a nivel de performance que Angular o React.

	
	# Vs React:

		* Similitudes:
			- Virtual DOM: Es un segundo DOM en el cual suceden los cambio primero y despues se comparan con el 	DOM principal y va realizando los cambios conforme van sucediendo.

			- Componentes: Las 2 permiten creat componentes.

			- Librerias core sólo para la UI.

		Performance:
			- Vue.js minimiza las interacciones con el DOM.
			- Minimizar los cálculos de JS para saber qué se va a modificar.

		Update performance:
			- Vue.js tiene dependencias auto-trackeadas: Vue.js sabe todo el tiempo que si se modifica un objeto
				se debe modificar tambien los componentes que contienen dicho objeto.

		Developer experience: Aprender React es más complicado.

		HTML: 
			- En React el html se escribe en el metodo render(), lo que se escriba dentro de este metodo es lo
				que se va renderizar en el html.

			- En Vue se usan 'templates' que son etiquetas html y dentro de estas se progama lo que se quiere 
				que aparezca. Es mucho más sencillo que el metodo render().

		CSS: 
			- Los estilos en React se declaran en JS como un JSON.

			- Y para Vue se puede usar, como siempre, <style> o un archivo .css tradicional. En React solo se
				se puede como dice arriba.




	# Vs Angular:

		* Las dos usan TypeScript.
		
		* Performance y tamaño: Vue es mas rapido que Angular y pesa la mitad.
		
		* Flexibilidad: Angular es un framework y al usarlo es muy complicado salir de su ecosistema, Vue es 
			una libreria mucho más liviana.

		* Curva de aprendizaje: Para aprender Vue basta HTML, CSS, JS, pero para Angular se tiene que
			manejar muchos conceptos: Servicios, Typescript ...


HOLA MUNDO CON VUE.JS
	
	* Colocar el script de CDN al final del body:

		<!-- Crear un objeto Vue() -->	
		<script type="text/javascript" charset="utf-8">
		  let app = new Vue({
			el: '#app', // el = Elemento a seleccionar se puede con selectores de CSS.
			data: {
				nombre: 'Miguel'
			}
		  })
		</script>

	* Como es Vue es una libreria reactiva puedo entrar a la consola del navegador y desde alli modificar el
		valor de la variable app:

		> app.nombre
		  "Miguel"
		> app.nombre = "Mundo"

	* No es posible colocar {{}} dentro de los atributo de los elementos del DOM. Hay que utilizar v-bind:

		No: <a href="{{ url }}" >Link</a>
		Si: <a v-bind:href="url (nombre variable)" >Link</a>


MANEJO DE CONDICIONES CON VUE.JS

	Tengo un elemento <a> el cual tiene un atributo 'v-if' cuyo valor debe el nombre de una variable que se
	encuentre en el 'data' de mi objeto VUE, si el valor de esta variable es 'true' entonces se mostrara el elemento <a>, si el 'false' no se mostrara:

		<a v-if='mostrar'> un link </a>

	Y en mi script:

		<script type="text/javascript" charset="utf-8">
		  let app = new Vue({
			el: '#app', // el = Elemento a seleccionar se puede con selectores de CSS.
			data: {
				nombre: 'Miguel',
				mostrar: true,
			}
		  })
		</script>

	** Si quiero asignar el mismo comportamiento a distintas etiquetas de HTML tengo las siguientes opciones:
		1. Colocar el v-if dentro de cada etiqueta.
		2. O bien puedo agrupar las diferentes etiquetas dentro de un <div> y a este colocarle el atributo v-if.
		3. Pero lo mas recomendable es usar la etiqueta '<template>':

			<template v-if="mostrar">
				<h1>Mi titulo</h1>
				<h2>Mi subtitulo</h2>
				<a :href="url" target="_blank">Ir a {{ pagina }}</a>
			</template>

			* Los Template no son elementos HTML, por lo tanto no son archivos que el navegador pueda
			  interpretar (al inspeccionar el codigo el navegador no lo muestra).
			* No se puede poner un atributo de CSS a un elemento que el navegador no entiende.
			* Template es un englobador de objetos que Vue.js puede interpretar.

	
	** Tambien se puede usar v-show que lo que hace es colocar display:none al elemento que vaya a ocultar, a
		diferencia de v-if que no incluye en el DOM la etiqueta usada.

			<div v-show="mostrar">
				v-show='mostrar', se muestra si mostrar es true
			</div>
			<div v-show="!mostrar">
				v-show="!mostrar", se muestra si mostrar es false 			
			</div>

		** v-show no se puede usar con <template> por que template no es una etiqueta valida de HTML.

	// 
		Se recomienda usar v-show cuando los elementos de muestran u ocultan dependiendo de la interacción del 
		usuario, por ejemplo con un botón, ya que al navegador le cuesta menos cambiar el atributo CSS, para
		otros casos se recomienda v-if.
	//


FILTRO DE DATOS EN VUE.JS
	
	Los filtros siven para que un elemento pase por un filtro antes de mostrarse en pantalla, por ejemplo que
	se muestre todo en mayuscula o todo en minuscula.

	Para aplicar filtros de usar | 'pipe' dentro del {{ }} = {{ variable | filtro }}

	** Crear filtros: En la construccion del objeto vue:

		let app = new Vue({
			el: '#app',
			data: {
				...
			},
    ----->	filters: {
				* Aca van los filtros *
			}
		  })

	** Es posible concatenar varios filtros que se iran aplicando en el orden en que se declaran:
		{{ variable | filtro1 | filtro2 | ... }}


